package com.m2m.domain;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class EmotionRecordExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table emotion_record
     *
     * @mbggenerated Thu Jan 11 17:51:54 CST 2018
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table emotion_record
     *
     * @mbggenerated Thu Jan 11 17:51:54 CST 2018
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table emotion_record
     *
     * @mbggenerated Thu Jan 11 17:51:54 CST 2018
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emotion_record
     *
     * @mbggenerated Thu Jan 11 17:51:54 CST 2018
     */
    public EmotionRecordExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emotion_record
     *
     * @mbggenerated Thu Jan 11 17:51:54 CST 2018
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emotion_record
     *
     * @mbggenerated Thu Jan 11 17:51:54 CST 2018
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emotion_record
     *
     * @mbggenerated Thu Jan 11 17:51:54 CST 2018
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emotion_record
     *
     * @mbggenerated Thu Jan 11 17:51:54 CST 2018
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emotion_record
     *
     * @mbggenerated Thu Jan 11 17:51:54 CST 2018
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emotion_record
     *
     * @mbggenerated Thu Jan 11 17:51:54 CST 2018
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emotion_record
     *
     * @mbggenerated Thu Jan 11 17:51:54 CST 2018
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emotion_record
     *
     * @mbggenerated Thu Jan 11 17:51:54 CST 2018
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emotion_record
     *
     * @mbggenerated Thu Jan 11 17:51:54 CST 2018
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emotion_record
     *
     * @mbggenerated Thu Jan 11 17:51:54 CST 2018
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table emotion_record
     *
     * @mbggenerated Thu Jan 11 17:51:54 CST 2018
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Long> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Long> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andUidIsNull() {
            addCriterion("uid is null");
            return (Criteria) this;
        }

        public Criteria andUidIsNotNull() {
            addCriterion("uid is not null");
            return (Criteria) this;
        }

        public Criteria andUidEqualTo(Long value) {
            addCriterion("uid =", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidNotEqualTo(Long value) {
            addCriterion("uid <>", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidGreaterThan(Long value) {
            addCriterion("uid >", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidGreaterThanOrEqualTo(Long value) {
            addCriterion("uid >=", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidLessThan(Long value) {
            addCriterion("uid <", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidLessThanOrEqualTo(Long value) {
            addCriterion("uid <=", value, "uid");
            return (Criteria) this;
        }

        public Criteria andUidIn(List<Long> values) {
            addCriterion("uid in", values, "uid");
            return (Criteria) this;
        }

        public Criteria andUidNotIn(List<Long> values) {
            addCriterion("uid not in", values, "uid");
            return (Criteria) this;
        }

        public Criteria andUidBetween(Long value1, Long value2) {
            addCriterion("uid between", value1, value2, "uid");
            return (Criteria) this;
        }

        public Criteria andUidNotBetween(Long value1, Long value2) {
            addCriterion("uid not between", value1, value2, "uid");
            return (Criteria) this;
        }

        public Criteria andEmotionidIsNull() {
            addCriterion("emotionId is null");
            return (Criteria) this;
        }

        public Criteria andEmotionidIsNotNull() {
            addCriterion("emotionId is not null");
            return (Criteria) this;
        }

        public Criteria andEmotionidEqualTo(Long value) {
            addCriterion("emotionId =", value, "emotionid");
            return (Criteria) this;
        }

        public Criteria andEmotionidNotEqualTo(Long value) {
            addCriterion("emotionId <>", value, "emotionid");
            return (Criteria) this;
        }

        public Criteria andEmotionidGreaterThan(Long value) {
            addCriterion("emotionId >", value, "emotionid");
            return (Criteria) this;
        }

        public Criteria andEmotionidGreaterThanOrEqualTo(Long value) {
            addCriterion("emotionId >=", value, "emotionid");
            return (Criteria) this;
        }

        public Criteria andEmotionidLessThan(Long value) {
            addCriterion("emotionId <", value, "emotionid");
            return (Criteria) this;
        }

        public Criteria andEmotionidLessThanOrEqualTo(Long value) {
            addCriterion("emotionId <=", value, "emotionid");
            return (Criteria) this;
        }

        public Criteria andEmotionidIn(List<Long> values) {
            addCriterion("emotionId in", values, "emotionid");
            return (Criteria) this;
        }

        public Criteria andEmotionidNotIn(List<Long> values) {
            addCriterion("emotionId not in", values, "emotionid");
            return (Criteria) this;
        }

        public Criteria andEmotionidBetween(Long value1, Long value2) {
            addCriterion("emotionId between", value1, value2, "emotionid");
            return (Criteria) this;
        }

        public Criteria andEmotionidNotBetween(Long value1, Long value2) {
            addCriterion("emotionId not between", value1, value2, "emotionid");
            return (Criteria) this;
        }

        public Criteria andHappyvalueIsNull() {
            addCriterion("happyValue is null");
            return (Criteria) this;
        }

        public Criteria andHappyvalueIsNotNull() {
            addCriterion("happyValue is not null");
            return (Criteria) this;
        }

        public Criteria andHappyvalueEqualTo(Integer value) {
            addCriterion("happyValue =", value, "happyvalue");
            return (Criteria) this;
        }

        public Criteria andHappyvalueNotEqualTo(Integer value) {
            addCriterion("happyValue <>", value, "happyvalue");
            return (Criteria) this;
        }

        public Criteria andHappyvalueGreaterThan(Integer value) {
            addCriterion("happyValue >", value, "happyvalue");
            return (Criteria) this;
        }

        public Criteria andHappyvalueGreaterThanOrEqualTo(Integer value) {
            addCriterion("happyValue >=", value, "happyvalue");
            return (Criteria) this;
        }

        public Criteria andHappyvalueLessThan(Integer value) {
            addCriterion("happyValue <", value, "happyvalue");
            return (Criteria) this;
        }

        public Criteria andHappyvalueLessThanOrEqualTo(Integer value) {
            addCriterion("happyValue <=", value, "happyvalue");
            return (Criteria) this;
        }

        public Criteria andHappyvalueIn(List<Integer> values) {
            addCriterion("happyValue in", values, "happyvalue");
            return (Criteria) this;
        }

        public Criteria andHappyvalueNotIn(List<Integer> values) {
            addCriterion("happyValue not in", values, "happyvalue");
            return (Criteria) this;
        }

        public Criteria andHappyvalueBetween(Integer value1, Integer value2) {
            addCriterion("happyValue between", value1, value2, "happyvalue");
            return (Criteria) this;
        }

        public Criteria andHappyvalueNotBetween(Integer value1, Integer value2) {
            addCriterion("happyValue not between", value1, value2, "happyvalue");
            return (Criteria) this;
        }

        public Criteria andFreevalueIsNull() {
            addCriterion("freeValue is null");
            return (Criteria) this;
        }

        public Criteria andFreevalueIsNotNull() {
            addCriterion("freeValue is not null");
            return (Criteria) this;
        }

        public Criteria andFreevalueEqualTo(Integer value) {
            addCriterion("freeValue =", value, "freevalue");
            return (Criteria) this;
        }

        public Criteria andFreevalueNotEqualTo(Integer value) {
            addCriterion("freeValue <>", value, "freevalue");
            return (Criteria) this;
        }

        public Criteria andFreevalueGreaterThan(Integer value) {
            addCriterion("freeValue >", value, "freevalue");
            return (Criteria) this;
        }

        public Criteria andFreevalueGreaterThanOrEqualTo(Integer value) {
            addCriterion("freeValue >=", value, "freevalue");
            return (Criteria) this;
        }

        public Criteria andFreevalueLessThan(Integer value) {
            addCriterion("freeValue <", value, "freevalue");
            return (Criteria) this;
        }

        public Criteria andFreevalueLessThanOrEqualTo(Integer value) {
            addCriterion("freeValue <=", value, "freevalue");
            return (Criteria) this;
        }

        public Criteria andFreevalueIn(List<Integer> values) {
            addCriterion("freeValue in", values, "freevalue");
            return (Criteria) this;
        }

        public Criteria andFreevalueNotIn(List<Integer> values) {
            addCriterion("freeValue not in", values, "freevalue");
            return (Criteria) this;
        }

        public Criteria andFreevalueBetween(Integer value1, Integer value2) {
            addCriterion("freeValue between", value1, value2, "freevalue");
            return (Criteria) this;
        }

        public Criteria andFreevalueNotBetween(Integer value1, Integer value2) {
            addCriterion("freeValue not between", value1, value2, "freevalue");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIsNull() {
            addCriterion("create_time is null");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIsNotNull() {
            addCriterion("create_time is not null");
            return (Criteria) this;
        }

        public Criteria andCreateTimeEqualTo(Date value) {
            addCriterion("create_time =", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotEqualTo(Date value) {
            addCriterion("create_time <>", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThan(Date value) {
            addCriterion("create_time >", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThanOrEqualTo(Date value) {
            addCriterion("create_time >=", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThan(Date value) {
            addCriterion("create_time <", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThanOrEqualTo(Date value) {
            addCriterion("create_time <=", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIn(List<Date> values) {
            addCriterion("create_time in", values, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotIn(List<Date> values) {
            addCriterion("create_time not in", values, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeBetween(Date value1, Date value2) {
            addCriterion("create_time between", value1, value2, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotBetween(Date value1, Date value2) {
            addCriterion("create_time not between", value1, value2, "createTime");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table emotion_record
     *
     * @mbggenerated do_not_delete_during_merge Thu Jan 11 17:51:54 CST 2018
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table emotion_record
     *
     * @mbggenerated Thu Jan 11 17:51:54 CST 2018
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}